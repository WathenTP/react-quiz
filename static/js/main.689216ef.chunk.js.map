{"version":3,"sources":["api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["quizQuestions","question","answers","type","content","Question","props","react_default","a","createElement","className","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","key","questionId","components_QuestionCount","questionTotal","components_Question","answerOptions","map","components_AnswerOption","Result","quizResult","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","answersCount","GalacticEmpire","Confederacy","GalacticSenate","result","handleAnswerSelected","bind","assertThisInitialized","_this2","shuffledAnswerOptions","shuffleArray","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","_this3","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","objectSpread","defineProperty","values","maxAnswerCount","max","apply","_Object$entries$filte","entries","filter","_ref","_ref2","slicedToArray","_ref3","console","log","components_Quiz","Results","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.689216ef.chunk.js","sourcesContent":["\nvar quizQuestions = [\n    {\n        question: \"What faction would you support during the 2nd Galactic Civil War?\",\n        answers: [\n            {\n                type: \"GalacticEmpire\",\n                content: \"Sith\"\n            },\n            {\n                type: \"Confederacy\",\n                content: \"Seperatists\"\n            },\n            {\n                type: \"GalacticSenate\",\n                content: \"Jedi\"\n            }\n        ]\n    },\n    {\n        question: \"Which Hero would you like to fight with?\",\n        answers: [\n            {\n                type: \"GalacticEmpire\",\n                content: \"Emperor Palpatine\"\n            },\n            {\n                type: \"Confederacy\",\n                content: \"General Grevious\"\n            },\n            {\n                type: \"GalacticSenate\",\n                content: \"Yoda\"\n            }\n        ]\n    },\n    {\n        question: \"Which of these films is best?\",\n        answers: [\n            {\n                type: \"GalacticEmpire\",\n                content: \"Revenge of the Sith\"\n            },\n            {\n                type: \"Confederacy\",\n                content: \"The Empire Strikes Back\"\n            },\n            {\n                type: \"GalacticSenate\",\n                content: \"Don't be stupid\"\n            }\n        ]\n    },\n    {\n        question: \"Who is the strongest Jedi\",\n        answers: [\n            {\n                type: \"GalacticEmpire\",\n                content: \"Mace Windu\"\n            },\n            {\n                type: \"Confederacy\",\n                content: \"Yoda\"\n            },\n            {\n                type: \"GalacticSenate\",\n                content: \"Obi-Wan Kenobi\"\n            }\n        ]\n    },\n    {\n        question: \"Why does Ryan Johnson destroy that which is beautiful?\",\n        answers: [\n            {\n                type: \"GalacticEmpire\",\n                content: \"Killing Snoke off without explanation\"\n            },\n            {\n                type: \"Confederacy\",\n                content: \"Not providing Rey with a backstory\"\n            },\n            {\n                type: \"GalacticSenate\",\n                content: \"Not having 1 lightsabre duel\"\n            }\n        ]\n    }\n  ];\n  \n  export default quizQuestions;","import propTypes from 'prop-types'\nimport React from 'react';\n  function Question(props) {\n    return (\n      <h2 className=\"question\">{props.content}</h2>\n    );\n  }\n  Question.propTypes = {\n    content: propTypes.string.isRequired\n  };\n  export default Question;","import React from 'react';\nimport propTypes from 'prop-types'\n\nfunction QuestionCount(props) {\n    return (\n        <div className=\"questionCount\">\n        Question <span>{props.counter}</span> of <span>{props.total}</span>\n            </div>\n    );\n}\n\nQuestionCount.propTypes = {\n    counter: propTypes.number.isRequired,\n    total: propTypes.number.isRequired\n};\n\nexport default QuestionCount;","import React from 'react';\nimport propTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n    return (\n        <li className=\"answerOption\">\n            <input\n                type=\"radio\"\n                className=\"radioCustomButtom\"\n                name=\"radioGroup\"\n                checked={props.answerType === props.answer}\n                id={props.answerType}\n                value={props.answerType}\n                disabled={props.answer}\n                onChange={props.onAnswerSelected}\n            />\n            <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n                {props.answerContent}\n              </label>\n            </li>\n    );\n}\n\nAnswerOption.propTypes = {\n    answerType: propTypes.string.isRequired,\n    answerContent: propTypes.string.isRequired,\n    answer: propTypes.string.isRequired,\n    onAnswerSelected: propTypes.func.isRequired\n};\n\nexport default AnswerOption;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nfunction Quiz(props) {\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={props.answer}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n\n  return (\n        <div key={props.questionId}>\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\n        <Question content={props.question} />\n        <ul className=\"answerOptions\">\n          {props.answerOptions.map(renderAnswerOptions)}\n        </ul>\n      </div>\n      );\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;","import propTypes from 'prop-types'\nimport React from 'react';\n  function Result(props) {\n    return (\n      <div className=\"result\">\n        You prefer <strong>{props.quizResult}</strong>!\n      </div>\n    );\n  }\n  Result.propTypes = {\n    quizResult: propTypes.string.isRequired,\n  };\n  export default Result;","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Results';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        GalacticEmpire: 0,\n        Confederacy: 0,\n        GalacticSenate : 0\n      },\n      result: ''\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentWillMount() {\n    const shuffledAnswerOptions = quizQuestions.map(question =>\n      this.shuffleArray(question.answers)\n    );\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state, props) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: state.answersCount[answer] + 1\n      },\n      answer\n    }));\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  getResults() {\n    const {answersCount} = this.state;\n    const values = Object.values(answersCount)\n    const maxAnswerCount = Math.max.apply(null, values);\n\n    const [result] = Object.entries(answersCount)\n      .filter(([key, value]) => value === maxAnswerCount)\n      .map(([key]) => key);\n\n    return result\n  }\n\n  setResults(result) {\n    if (result) {\n      this.setState({ result });\n    } else {\n      this.setState({ result: 'Undetermined' });\n          }\n          console.log(result)\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderResult() {\n    return <Result quizResult={this.state.result} />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}