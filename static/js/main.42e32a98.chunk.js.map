{"version":3,"sources":["components/Question.js","api/quizQuestions.js","components/Results.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Question","props","react_default","a","createElement","className","content","quizQuestions","question","answers","type","Result","quizResult","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleAnswerSelected","bind","assertThisInitialized","state","counter","questionId","answerOptions","answer","answersCount","nintendo","microsoft","sony","result","_this2","shuffledAnswerOptions","map","shuffleArray","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","updatedAnswersCount","update","defineProperty","$apply","currentValue","event","_this3","setUserAnswer","currentTarget","value","setTimeout","setNextQuestion","setResults","getResults","answersCountKeys","keys","answersCountValues","key","maxAnswerCount","max","apply","filter","questionTotal","onAnswerSelected","Results","src","logo","alt","components_Question","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.42e32a98.chunk.js","sourcesContent":["import propTypes from 'prop-types'\nimport React from 'react';\n  function Question(props) {\n    return (\n      <h2 className=\"question\">{props.content}</h2>\n    );\n  }\n  Question.propTypes = {\n    content: propTypes.string.isRequired\n  };\n  export default Question;","\nvar quizQuestions = [\n    {\n        question: \"What faction would you support during the 2nd Galactic Civil War?\",\n        answers: [\n            {\n                type: \"Galactic Empire\",\n                content: \"Sith\"\n            },\n            {\n                type: \"Confederacy\",\n                content: \"Seperatists\"\n            },\n            {\n                type: \"Galactic Senate\",\n                content: \"Jedi\"\n            }\n        ]\n    },\n    {\n        question: \"Which Hero would you like to fight with?\",\n        answers: [\n            {\n                type: \"Sith\",\n                content: \"Emperor Palpatine\"\n            },\n            {\n                type: \"Seperatists\",\n                content: \"General Grevious\"\n            },\n            {\n                type: \"Jedi\",\n                content: \"Yoda\"\n            }\n        ]\n    },\n    {\n        question: \"Which of these films is best?\",\n        answers: [\n            {\n                type: \"Prequel\",\n                content: \"Revenge of the Sith\"\n            },\n            {\n                type: \"Original\",\n                content: \"The Empire Strikes Back\"\n            },\n            {\n                type: \"Sequel\",\n                content: \"Don't be stupid\"\n            }\n        ]\n    },\n    {\n        question: \"Who is the strongest Jedi\",\n        answers: [\n            {\n                type: \"Swordsman\",\n                content: \"Mace Windu\"\n            },\n            {\n                type: \"Force\",\n                content: \"Yoda\"\n            },\n            {\n                type: \"Strategist\",\n                content: \"Obi-Wan Kenobi\"\n            }\n        ]\n    },\n    {\n        question: \"Why does Ryan Johnson destroy that which is beautiful?\",\n        answers: [\n            {\n                type: \"Sadomasochism\",\n                content: \"Killing Snoke off without explanation\"\n            },\n            {\n                type: \"Mental Retardation\",\n                content: \"Not providing Rey with a backstory\"\n            },\n            {\n                type: \"Pychopathy\",\n                content: \"Not having 1 lightsabre duel\"\n            }\n        ]\n    }\n  ];\n  \n  export default quizQuestions;","import propTypes from 'prop-types'\nimport React from 'react';\n  function Result(props) {\n    return (\n      <div className=\"result\">\n        You prefer <strong>{props.quizResult}</strong>!\n      </div>\n    );\n  }\n  Result.propTypes = {\n    quizResult: propTypes.string.isRequired,\n  };\n  export default Result;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Question from './components/Question';\nimport quizQuestions from './api/quizQuestions';\nimport Results from './components/Results';\nimport update from 'react-addons-update';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n    this.state = {\n     counter: 0,\n     questionId: 1,\n     question: '',\n     answerOptions: [],\n     answer: '',\n     answersCount: {\n       nintendo: 0,\n       microsoft: 0,\n       sony: 0\n     },\n     result: ''\n     \n    };\n  }\n  componentWillMount() {\n    const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));  \n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n  shuffleArray(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n  setUserAnswer(answer) {\n    const updatedAnswersCount = update(this.state.answersCount, {\n      [answer]: {$apply: (currentValue) => currentValue + 1}\n    });\n    this.setState({\n      answersCount: updatedAnswersCount,\n      answer: answer\n    });\n  }\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n    if (this.state.questionId < quizQuestions.length) {\n        setTimeout(() => this.setNextQuestion(), 300);\n      } else {\n          setTimeout(() => this.setResults(this.getResults()), 300);\n      }\n  }\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n    return answersCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\n  }\n  setResults (result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n  renderQuiz() {\n    return (\n      <quizQuestions\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n  renderResult() {\n    return (\n      <Results quizResult={this.state.result} />\n    );\n  }\n  render () {\n    return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h2>Thom's Big Fat Quiz of the Year!</h2>\n      </div>\n      <Question content=\"Fundamental Questions on the Star Wars Universe!\" />\n      {this.state.result ? this.renderResult() : this.renderQuiz()}\n    </div>\n    )\n  };\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}